server:
  port: 8000
  forward-headers-strategy: none

spring:
  profiles:
    active: local
  thymeleaf:
    prefix: classpath:/templates/
    suffix: .html
  h2:
    console:
      enabled: true
      path: /h2-console
  datasource:
    url: jdbc:h2:mem:testdb
    username: sa
    password:
    driver-class-name: org.h2.Driver
  jpa:
    hibernate:
      ddl-auto: create
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    properties:
      hibernate:
        format_sql: true
    database: h2
    show-sql: true
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: 403181105505-nsmsfa577737c02ohjt57ddg8h1c74ut.apps.googleusercontent.com
            client-secret: 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
            scope:
              - email
              - profile
          naver:
            client-id: as
            client-secret: asdasd
            client-authentication-method: post
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
            scope:
              - nickname
              - email
              - profile_image
            client-name: Naver
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response


logging:
  level:
    sql: debug

#jwt
auth:
  jwt:
    secret: '3lk23mklz9scbaslkgbkl124lq4k6lk26nlkn'
    expiration: 1800000
    refreshTokenExpiry: 604800000
  oauth2:
    authorizedRedirectUris:
      - http://127.0.0.1:8000/oauth/redirect

# cors 설정
cors:
  allowed-origins: 'http://127.0.0.1:8000'
  allowed-methods: GET,POST,PUT,DELETE,OPTIONS
  allowed-headers: '*'
  max-age: 3600
